/*
 * SavingsAccount.cpp
 *
 *  Created on: 16 Feb 2017
 *      Author: emiliano
 */

#include <iostream>
#include "SavingsAccount.h"

SavingsAccount::SavingsAccount(double initialBalance, double interestRate)
	: BankAccount(initialBalance), interestRate(interestRate), frozen(false) {}

SavingsAccount::~SavingsAccount() {}


void SavingsAccount::earnInterest() {
	if(!this->frozen) {
		double interest = this->balance * (this->interestRate / 100);
		deposit(interest);
	}
}

void SavingsAccount::deposit(double amount) {
	if(!this->frozen) {
		BankAccount::deposit(amount);
		log("Deposit: " + std::to_string(amount));
	}
}

void SavingsAccount::withdraw(double amount) {
	if(!this->frozen && amount <= this->balance) {
		BankAccount::withdraw(amount);
		log("Withdraw: " + std::to_string(amount));
	}
}

// Implement the pure virtual functions
std::string SavingsAccount::getTermsAndConditions() {

}

double SavingsAccount::getGuaranteedLimit() {

}

void log(const std::string & message) const {

}

void freeze() {

}

void unfreeze() {

}

